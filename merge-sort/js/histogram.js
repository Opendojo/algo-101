// Generated by CoffeeScript 1.8.0
var Histo, histogram;

histogram = (function() {
  function histogram() {
    this.init();
    this.render();
  }

  histogram.prototype.init = function() {
    var i;
    this.width = 420;
    this.barHeight = 5;
    this.data = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 100; i = ++_i) {
        _results.push(Math.floor(Math.random() * 100));
      }
      return _results;
    })();
    console.log(this.data);
    this.chart = d3.select("body").append("svg").attr("width", this.width).attr("height", this.barHeight * this.data.length);
  };

  histogram.prototype.render = function() {
    var bar, x;
    x = d3.scale.linear().domain([0, d3.max(this.data)]).range([0, this.width]);
    bar = this.chart.selectAll("g").data(this.data);
    bar.attr('class', 'update');
    bar.enter().append("g").attr("class", "enter").attr("transform", (function(_this) {
      return function(d, i) {
        return "translate(0," + i * _this.barHeight + ")";
      };
    })(this));
    bar.append("rect").attr("width", x).attr("height", this.barHeight - 1);
    bar.append("text").attr("x", function(d) {
      return x(d) + 5;
    }).attr("y", this.barHeight / 2).attr("dy", ".35em").text(function(d) {
      return d;
    });
    bar.exit().remove();
  };

  histogram.prototype.getData = function() {
    return this.data;
  };

  histogram.prototype.setData = function(data) {
    this.data = data;
    return this;
  };

  return histogram;

})();

Histo = new histogram();

console.log(Histo.getData());

window.histo = Histo;

//# sourceMappingURL=histogram.js.map
